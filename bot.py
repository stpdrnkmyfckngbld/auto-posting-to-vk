# bot.py
import os
import requests
import vk_api
import re
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import ChatMemberUpdated
from aiogram.client.session.aiohttp import AiohttpSession
import asyncio
from collections import defaultdict
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
VK_GROUP_TOKEN = os.getenv("VK_ACCESS_TOKEN")
VK_USER_TOKEN = os.getenv("VK_USER_TOKEN")
GROUP_ID = os.getenv("VK_GROUP_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
session = AiohttpSession()
bot = Bot(token=TELEGRAM_BOT_TOKEN, session=session)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
media_groups = defaultdict(dict)
processed_media_groups = set()

def process_text(text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ VK"""
    if not text:
        return text
    
    # 1. –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã —Å —Å–ª–æ–≤–æ–º "–†–æ–∑—ã–≥—Ä—ã—à" (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    if re.search(r'—Ä–æ–∑—ã–≥—Ä—ã—à', text, re.IGNORECASE):
        return None
    
    # 2. –ó–∞–º–µ–Ω—è–µ–º @freelogistics –Ω–∞ @freelogistics1
    text = text.replace('@freelogistics', '@freelogistics1')
    
    # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ markdown —Å—Å—ã–ª–æ–∫)
    def replace_links(match):
        return match.group(2)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ URL
    
    text = re.sub(r'\[([^\]]+)\]\((https?://[^\)]+)\)', replace_links, text)
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
def upload_photo_to_vk(photo_url):
    try:
        response = requests.get(photo_url)
        if response.status_code == 200:
            vk_session = vk_api.VkApi(token=VK_USER_TOKEN)
            upload_url = vk_session.method("photos.getWallUploadServer", {"group_id": GROUP_ID})['upload_url']
            files = {'photo': ('photo.jpg', response.content, 'image/jpeg')}
            upload_response = requests.post(upload_url, files=files).json()

            save_response = vk_session.method("photos.saveWallPhoto", {
                'photo': upload_response['photo'],
                'server': upload_response['server'],
                'hash': upload_response['hash'],
                'group_id': GROUP_ID
            })
            return f"photo{save_response[0]['owner_id']}_{save_response[0]['id']}"
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
def post_to_vk(text, photo_urls=None):
    try:
        if text is None:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç None (—Ä–æ–∑—ã–≥—Ä—ã—à), –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º
            print("‚è© –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º")
            return
            
        vk_session = vk_api.VkApi(token=VK_GROUP_TOKEN)
        vk = vk_session.get_api()

        attachments = []
        if photo_urls:
            for photo_url in photo_urls:
                photo_attachment = upload_photo_to_vk(photo_url)
                if photo_attachment:
                    attachments.append(photo_attachment)

        vk.wall.post(
            owner_id=f"-{GROUP_ID}",
            message=text,
            attachments=",".join(attachments) if attachments else None,
            from_group=1
        )
        print(f"‚úÖ –ü–æ—Å—Ç —Å {len(attachments)} —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø—É!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
@dp.channel_post()
async def handle_channel_post(message: types.Message):
    if str(message.chat.id) != TELEGRAM_CHANNEL_ID:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤)
    if message.media_group_id:
        media_group_id = message.media_group_id

        # –ï—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if media_group_id in processed_media_groups:
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        if media_group_id not in media_groups:
            media_groups[media_group_id] = {
                'text': message.caption or "",
                'photos': [],
                'last_update': time.time(),
                'processed': False
            }

        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if message.photo:
            largest_photo = message.photo[-1]
            file_info = await bot.get_file(largest_photo.file_id)
            photo_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
            if photo_url not in media_groups[media_group_id]['photos']:
                media_groups[media_group_id]['photos'].append(photo_url)
                media_groups[media_group_id]['last_update'] = time.time()

        # –ï—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è - –≤—ã—Ö–æ–¥–∏–º
        if media_groups[media_group_id]['processed']:
            return

        # –ü–æ–º–µ—á–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
        media_groups[media_group_id]['processed'] = True

        # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏–¥—É—Ç –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        await asyncio.sleep(3)

        # –ü—É–±–ª–∏–∫—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        await process_media_group(media_group_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    original_text = message.text or message.caption or ""
    text = process_text(original_text)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    
    if text is None:  # –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à
        print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å—Ç —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º: {original_text[:50]}...")
        return
        
    photos = []

    if message.photo:
        largest_photo = message.photo[-1]
        file_info = await bot.get_file(largest_photo.file_id)
        photo_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
        photos.append(photo_url)

    if photos:
        post_to_vk(text, photos)
    else:
        post_to_vk(text)

    print(f"üîî –ü–æ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {text[:50]}... ({len(photos)} —Ñ–æ—Ç–æ)")

async def process_media_group(media_group_id):
    if media_group_id not in media_groups:
        return

    group_data = media_groups[media_group_id]
    if not group_data['photos']:
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    processed_text = process_text(group_data['text'])
    if processed_text is None:  # –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à
        print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º: {group_data['text'][:50]}...")
        processed_media_groups.add(media_group_id)
        del media_groups[media_group_id]
        return

    # –ü—É–±–ª–∏–∫—É–µ–º –≤–µ—Å—å –∞–ª—å–±–æ–º
    post_to_vk(processed_text, group_data['photos'])
    print(f"üîî –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {processed_text[:50]}... ({len(group_data['photos'])} —Ñ–æ—Ç–æ)")

    # –ü–æ–º–µ—á–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    processed_media_groups.add(media_group_id)
    del media_groups[media_group_id]

async def cleanup_media_groups():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ–¥–∏–∞–≥—Ä—É–ø–ø"""
    while True:
        await asyncio.sleep(60)
        current_time = time.time()
        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
        for mg_id in list(media_groups.keys()):
            if current_time - media_groups[mg_id]['last_update'] > 300:
                del media_groups[mg_id]
                print(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {mg_id}")

async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
    asyncio.create_task(cleanup_media_groups())

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
